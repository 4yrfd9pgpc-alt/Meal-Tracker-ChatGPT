
const VERSION='1.0.0'; document.getElementById('version').textContent=`v${VERSION}`;
const tabs=[{id:'today',label:'Today'},{id:'library',label:'Food Library'},{id:'history',label:'History'},{id:'charts',label:'Charts'},{id:'settings',label:'Settings'}];
const MEALS=['Breakfast','Lunch','Dinner','Snacks'];
const $tabs=document.getElementById('tabs'), $view=document.getElementById('view');
function save(k,v){localStorage.setItem(k,JSON.stringify(v))} function load(k,f){try{return JSON.parse(localStorage.getItem(k))??f}catch{return f}} function todayStr(){return new Date().toISOString().slice(0,10)} function uid(){return Math.random().toString(36).slice(2,10)} function clamp(v,min,max){return Math.max(min,Math.min(max,v))}
let state={goals:load('mt.goals',{kcal:2000,protein:120,carbs:220,fat:70}),weight:load('mt.weight',[]),library:load('mt.library',[{id:uid(),name:'Cooked Basmati Rice',unit:'100g',per:{kcal:130,protein:2.4,carbs:28,fat:0.3}},{id:uid(),name:'Grilled Chicken Thigh',unit:'100g',per:{kcal:209,protein:26,carbs:0,fat:11}},{id:uid(),name:'Chickpeas (cooked)',unit:'100g',per:{kcal:164,protein:9,carbs:27,fat:2.6}},{id:uid(),name:'Olive Oil',unit:'1 tbsp',per:{kcal:119,protein:0,carbs:0,fat:13.5}},{id:uid(),name:'Banana',unit:'1 medium (118g)',per:{kcal:105,protein:1.3,carbs:27,fat:0.3}}]),diary:load('mt.diary',{}),recents:load('mt.recents',[]),favorites:load('mt.favorites',[])};
function persist(){save('mt.goals',state.goals);save('mt.weight',state.weight);save('mt.library',state.library);save('mt.diary',state.diary);save('mt.recents',state.recents);save('mt.favorites',state.favorites)}
let current='today'; function renderTabs(){ $tabs.innerHTML=''; for(const t of tabs){ const b=document.createElement('button'); b.className='tab'+(current===t.id?' active':''); b.textContent=t.label; b.onclick=()=>{current=t.id; render(); history.replaceState(null,'',`#${t.id}`)}; $tabs.appendChild(b);}}
window.addEventListener('load',()=>{ current=location.hash?.slice(1)||'today'; renderTabs(); render(); });
function totalsFor(entries){const t={kcal:0,protein:0,carbs:0,fat:0}; for(const e of entries){t.kcal+=e.kcal;t.protein+=e.protein;t.carbs+=e.carbs;t.fat+=e.fat} return t}
function scalePer(per,amount){return {kcal:per.kcal*amount,protein:per.protein*amount,carbs:per.carbs*amount,fat:per.fat*amount}}
function fmt(n){return Math.round(n)} function fmtd(n){return Math.round(n*10)/10}
function render(){ renderTabs(); if(current==='today') viewToday(); else if(current==='library') viewLibrary(); else if(current==='history') viewHistory(); else if(current==='charts') viewCharts(); else if(current==='settings') viewSettings(); }
function addToDiary(date,entry){ if(!state.diary[date]) state.diary[date]=[]; state.diary[date].push(entry); state.recents.unshift({id:entry.food.id,name:entry.food.name,when:Date.now()}); state.recents=state.recents.slice(0,30); persist(); render(); }
function itemHTML(e){ return `<div class="item" id="item-${e.id}"><div><div><strong>${e.food.name}</strong> • ${e.meal}</div><div class="muted">${fmt(e.kcal)} kcal • P ${fmtd(e.protein)} • C ${fmtd(e.carbs)} • F ${fmtd(e.fat)}</div></div><button class="button" id="del-${e.id}" aria-label="Delete">×</button></div>` }
function quickAddHTML(meal){ const options=state.library.map(f=>`<option value="${f.id}">${f.name} (${f.unit})</option>`).join(''); return `<form class="row" id="qa-${meal}" style="margin-top:8px;flex-wrap:wrap"><select class="input" name="food">${options}</select><input class="input" name="amount" type="number" step="0.01" min="0" placeholder="Servings (e.g. 1.5)" style="max-width:150px"><input class="input" name="per" type="hidden" value="1"><button class="button primary" type="submit">Add</button></form><div class="hint">Nutrition is per “unit” defined in the library (e.g., per 100g or per serving).</div>` }
function delEntry(date,id){ state.diary[date]=(state.diary[date]||[]).filter(e=>e.id!==id); persist(); render(); }
function editEntryDialog(date,id){ const e=(state.diary[date]||[]).find(x=>x.id===id); if(!e) return; const amt=prompt(`Edit servings for ${e.food.name}`, String(e.amount)); if(amt===null) return; const amount=parseFloat(amt); if(!isFinite(amount)||amount<0) return; const f=state.library.find(f=>f.id===e.food.id); const scaled=scalePer(f.per, amount*e.per); e.amount=amount; e.kcal=scaled.kcal; e.protein=scaled.protein; e.carbs=scaled.carbs; e.fat=scaled.fat; persist(); render(); }
function viewToday(){ const d=todayStr(); const entries=state.diary[d]||[]; const totals=totalsFor(entries); const goal=state.goals; const pct=(totals.kcal/goal.kcal)*100; $view.innerHTML=`<div class="grid"><div class="card"><h3>Today • ${d}</h3><div class="totals"><div class="pill"><div class="muted">Calories</div><div>${fmt(totals.kcal)} / ${fmt(goal.kcal)}</div></div><div class="pill"><div class="muted">Protein</div><div>${fmtd(totals.protein)} / ${fmt(goal.protein)} g</div></div><div class="pill"><div class="muted">Carbs</div><div>${fmtd(totals.carbs)} / ${fmt(goal.carbs)} g</div></div><div class="pill"><div class="muted">Fat</div><div>${fmtd(totals.fat)} / ${fmt(goal.fat)} g</div></div></div><div class="hint" style="margin-top:8px">Hold on an item to edit. Swipe left (or use ×) to delete.</div><div class="progress" style="margin-top:10px"><div style="width:${clamp(pct,0,100)}%"></div></div></div>${MEALS.map(meal=>{const list=entries.filter(e=>e.meal===meal); return `<div class="card"><h3>${meal}</h3><div class="list" id="list-${meal}">${list.map(e=>itemHTML(e)).join('')||'<div class="muted">No items yet.</div>'}</div>${quickAddHTML(meal)}</div>`}).join('')}</div>`; for(const meal of MEALS){ const form=document.getElementById(`qa-${meal}`); form.onsubmit=(ev)=>{ ev.preventDefault(); const foodId=form.food.value; const amount=parseFloat(form.amount.value||'1'); const per=parseFloat(form.per.value||'1'); const found=state.library.find(f=>f.id===foodId); if(!found) return; const scaled=scalePer(found.per, amount*per); addToDiary(todayStr(), {id:uid(),meal,when:Date.now(),food:{id:found.id,name:found.name,unit:found.unit},amount,per,...scaled}); form.reset(); }; } entries.forEach(e=>{ const del=document.getElementById(`del-${e.id}`); del.onclick=()=>{delEntry(d,e.id)}; const item=document.getElementById(`item-${e.id}`); let pressTimer; item.addEventListener('touchstart',()=>{pressTimer=setTimeout(()=>editEntryDialog(d,e.id),600)}); item.addEventListener('touchend',()=>clearTimeout(pressTimer)); item.addEventListener('mousedown',()=>{pressTimer=setTimeout(()=>editEntryDialog(d,e.id),600)}); item.addEventListener('mouseup',()=>clearTimeout(pressTimer)); }); }
function viewLibrary(){ $view.innerHTML=`<div class="grid"><div class="card"><h3>Add Food</h3><form id="addFood" class="list"><input class="input" name="name" placeholder="Name (e.g., Paneer)"><input class="input" name="unit" placeholder='Unit (e.g., "100g" or "1 serving")'><div class="row" style="gap:8px;flex-wrap:wrap"><input class="input" name="kcal" type="number" step="0.1" placeholder="kcal per unit"><input class="input" name="protein" type="number" step="0.1" placeholder="protein g per unit"><input class="input" name="carbs" type="number" step="0.1" placeholder="carbs g per unit"><input class="input" name="fat" type="number" step="0.1" placeholder="fat g per unit"></div><button class="button primary" type="submit">Save</button></form></div><div class="card"><h3>Foods</h3><input id="search" class="input" placeholder="Search foods…"><div class="list" id="foodList" style="margin-top:8px"></div></div></div>`; function renderList(q=''){ const list=document.getElementById('foodList'); const items=state.library.filter(f=>f.name.toLowerCase().includes(q.toLowerCase())).sort((a,b)=>a.name.localeCompare(b.name)).map(f=>`<div class="item"><div><div><strong>${f.name}</strong></div><div class="muted">${f.unit} — ${Math.round(f.per.kcal)} kcal • P ${f.per.protein} • C ${f.per.carbs} • F ${f.per.fat}</div></div><div class="row"><button class="button" onclick="addFav('${f.id}')">★</button><button class="button" onclick="delFood('${f.id}')">×</button></div></div>`).join(''); list.innerHTML=items||'<div class="muted">No foods yet.</div>'; } renderList(); document.getElementById('search').oninput=(e)=>renderList(e.target.value); document.getElementById('addFood').onsubmit=(ev)=>{ ev.preventDefault(); const fd=new FormData(ev.target); const f={id:uid(),name:(fd.get('name')||'').toString().trim(),unit:(fd.get('unit')||'').toString().trim(),per:{kcal:parseFloat(fd.get('kcal')||'0'),protein:parseFloat(fd.get('protein')||'0'),carbs:parseFloat(fd.get('carbs')||'0'),fat:parseFloat(fd.get('fat')||'0')}}; if(!f.name||!f.unit) return alert('Name and unit are required.'); state.library.push(f); persist(); ev.target.reset(); renderList(); }; }
window.addFav=(id)=>{ if(!state.favorites.includes(id)) state.favorites.push(id); persist(); alert('Added to favorites'); }
window.delFood=(id)=>{ if(!confirm('Delete this food?')) return; state.library=state.library.filter(f=>f.id!==id); persist(); render(); }
function viewHistory(){ const days=Object.keys(state.diary).sort().reverse(); $view.innerHTML=`<div class="card"><h3>History</h3><div class="list">${days.map(d=>{const t=totalsFor(state.diary[d]); return `<div class="item"><div><strong>${d}</strong> • ${fmt(t.kcal)} kcal • P ${fmtd(t.protein)} • C ${fmtd(t.carbs)} • F ${fmtd(t.fat)}</div><div class="row"><button class="button" onclick="jumpTo('${d}')">Open</button></div></div>`}).join('')||'<div class="muted">No history yet.</div>'}</div></div>`; }
window.jumpTo=(d)=>{ const entries=state.diary[d]||[]; const t=totalsFor(entries); alert(`${d}\n${fmt(t.kcal)} kcal  P ${fmtd(t.protein)}  C ${fmtd(t.carbs)}  F ${fmtd(t.fat)}\n\nUse Today tab to add more.`) }
function viewCharts(){ const last7=[]; for(let i=6;i>=0;i--){ const date=new Date(Date.now()-i*86400000).toISOString().slice(0,10); const t=totalsFor(state.diary[date]||[]); last7.push({date,kcal:t.kcal||0}); } $view.innerHTML=`<div class="grid"><div class="card"><h3>Calories (7 days)</h3><canvas id="calChart" width="800" height="280" style="width:100%"></canvas><div class="hint">Bars show total kcal per day vs goal (${state.goals.kcal}).</div></div></div>`; const canvas=document.getElementById('calChart'); const ctx=canvas.getContext('2d'); const w=canvas.width,h=canvas.height; ctx.clearRect(0,0,w,h); const pad=30; const maxK=Math.max(state.goals.kcal,...last7.map(d=>d.kcal),1000); const step=(w-pad*2)/last7.length; const barW=step*0.6; last7.forEach((d,i)=>{ const x=pad+i*step+(step-barW)/2; const bh=(d.kcal/maxK)*(h-pad*2); const y=h-pad-bh; ctx.fillRect(x,y,barW,bh); }); const gy=h-pad-(state.goals.kcal/maxK)*(h-pad*2); ctx.beginPath(); ctx.moveTo(pad,gy); ctx.lineTo(w-pad,gy); ctx.lineWidth=2; ctx.stroke(); ctx.font='12px -apple-system, Helvetica, Arial'; ctx.textAlign='center'; ctx.textBaseline='top'; last7.forEach((d,i)=>{ const x=pad+i*step+step/2; ctx.fillText(d.date.slice(5), x, h-pad+6); }); }
function viewSettings(){ $view.innerHTML=`<div class="grid"><div class="card"><h3>Goals</h3><form id="goalsForm" class="row" style="flex-wrap:wrap"><input class="input" name="kcal" type="number" step="1" value="${state.goals.kcal}" placeholder="kcal"><input class="input" name="protein" type="number" step="1" value="${state.goals.protein}" placeholder="protein g"><input class="input" name="carbs" type="number" step="1" value="${state.goals.carbs}" placeholder="carbs g"><input class="input" name="fat" type="number" step="1" value="${state.goals.fat}" placeholder="fat g"><button class="button primary" type="submit">Save</button></form></div><div class="card"><h3>Data</h3><div class="row" style="flex-wrap:wrap"><button class="button" id="exportBtn">Export JSON</button><label class="button" for="importFile">Import JSON</label><input id="importFile" type="file" accept="application/json" class="hidden"><button class="button" id="resetBtn">Reset All</button></div><div class="hint" style="margin-top:8px">Export creates a backup you can save in Files/iCloud. Import restores your data.</div></div><div class="card"><h3>Install on iPhone</h3><ol class="hint"><li>Open this app link in Safari.</li><li>Tap the <span class="kbd">Share</span> icon.</li><li>Select <span class="kbd">Add to Home Screen</span>.</li></ol></div></div>`; document.getElementById('goalsForm').onsubmit=(ev)=>{ ev.preventDefault(); const fd=new FormData(ev.target); state.goals={kcal:parseInt(fd.get('kcal')||'0',10),protein:parseInt(fd.get('protein')||'0',10),carbs:parseInt(fd.get('carbs')||'0',10),fat:parseInt(fd.get('fat')||'0',10)}; persist(); alert('Saved'); }; document.getElementById('exportBtn').onclick=()=>{ const data={goals:state.goals,library:state.library,diary:state.diary,weight:state.weight,recents:state.recents,favorites:state.favorites,version:VERSION}; const blob=new Blob([JSON.stringify(data)],{type:'application/json'}); const url=URL.createObjectURL(blob); const a=document.createElement('a'); a.href=url; a.download='mealtrack_backup.json'; document.body.appendChild(a); a.click(); a.remove(); URL.revokeObjectURL(url); }; document.getElementById('importFile').onchange=(ev)=>{ const file=ev.target.files[0]; if(!file) return; const reader=new FileReader(); reader.onload=()=>{ try{ const data=JSON.parse(reader.result); Object.assign(state,{goals:data.goals??state.goals,library:data.library??state.library,diary:data.diary??state.diary,weight:data.weight??state.weight,recents:data.recents??state.recents,favorites:data.favorites??state.favorites}); persist(); alert('Imported'); render(); }catch(err){ alert('Invalid file'); } }; reader.readAsText(file); }; document.getElementById('resetBtn').onclick=()=>{ if(!confirm('This will erase ALL local data. Continue?')) return; localStorage.clear(); location.reload(); }; }
let deferredPrompt; window.addEventListener('beforeinstallprompt',(e)=>{ e.preventDefault(); deferredPrompt=e; document.getElementById('installStatus').textContent='Install available'; });
document.getElementById('installBtn').onclick=async()=>{ if(deferredPrompt){ deferredPrompt.prompt(); await deferredPrompt.userChoice; deferredPrompt=null; } else { document.getElementById('installHint').classList.remove('hidden'); } };
document.getElementById('shareBtn').onclick=async()=>{ if(navigator.share){ navigator.share({title:'MealTrack',text:'My private meal tracker (works offline)',url:location.href}); } else { document.getElementById('installHint').classList.remove('hidden'); } };
if('serviceWorker' in navigator){ window.addEventListener('load',()=>{ navigator.serviceWorker.register('./sw.js').then(()=>{ document.getElementById('installStatus').textContent='Offline-ready'; }).catch(()=>{ document.getElementById('installStatus').textContent='SW failed'; }); }); }
